name: CI Workflow

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test-and-cleanup:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout the code
      - name: Checkout Code
        uses: actions/checkout@v2

      # Step 2: Set up Terraform
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.3.6

      - name: Terraform Init and Validate
        working-directory: terraform
        run: |
          terraform init
          terraform validate

      # Step 3: Install Kind CLI
      - name: Install Kind
        run: |
          curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.17.0/kind-linux-amd64
          chmod +x ./kind
          sudo mv ./kind /usr/local/bin/kind
          kind version

      # Step 4: Create Kind Cluster (with retry logic)
      - name: Create Kind Cluster
        run: |
          for i in {1..3}; do
            kind create cluster --name verkstedt-cluster && break || sleep 10
          done

      # Step 5: Verify Kind cluster is up
      - name: Verify Kind Cluster Is Ready
        run: |
          kubectl cluster-info --context kind-verkstedt-cluster

      # Step 6: Set up kubectl
      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.25.0'

      # Step 7: Pre-pull nginx image and load into Kind
      - name: Pre-pull nginx image into Kind
        run: |
          docker pull nginx:latest
          kind load docker-image nginx:latest --name verkstedt-cluster

      # Step 8: Apply Terraform (provision namespace, etc.)
      - name: Terraform Apply
        working-directory: terraform
        run: terraform apply -auto-approve

      # Step 9: Deploy Kubernetes manifests
      - name: Deploy Kubernetes Manifests
        run: |
          kubectl apply -f secrets/
          kubectl apply -f k8s/

      # Step 10: Wait for all Deployments to be ready (continue-on-error to allow debug)
      - name: Wait for Deployments to be Ready
        continue-on-error: true
        run: |
          kubectl wait --for=condition=available --timeout=180s deployment/nginx -n verkstedt-demo
          kubectl wait --for=condition=available --timeout=180s deployment/postgres -n verkstedt-demo
          kubectl wait --for=condition=available --timeout=180s deployment/prometheus -n verkstedt-demo
          kubectl wait --for=condition=available --timeout=180s deployment/grafana -n verkstedt-demo

      # Step 11: Debug deployment if readiness failed
      - name: Debug NGINX Deployment Status
        run: |
          echo "üß™ Pods:"
          kubectl get pods -n verkstedt-demo -o wide || true

          echo "üìã Events:"
          kubectl get events -n verkstedt-demo --sort-by=.metadata.creationTimestamp || true

          echo "üîç Describe NGINX deployment:"
          kubectl describe deployment nginx -n verkstedt-demo || true

          echo "üì¶ Logs from NGINX pod:"
          POD=$(kubectl get pods -n verkstedt-demo -l app=nginx -o jsonpath="{.items[0].metadata.name}" 2>/dev/null || echo "")
          if [ -n "$POD" ]; then
            kubectl logs "$POD" -n verkstedt-demo || true
          else
            echo "‚ö†Ô∏è No NGINX pod found."
          fi

      # Step 12: Describe any pending pods (scheduling failures, etc.)
      - name: Describe Pending Pods (if any)
        run: |
          kubectl get pods -n verkstedt-demo -o name | xargs -r kubectl describe -n verkstedt-demo || true

      # Step 13: Cleanup Kubernetes resources
      - name: Cleanup Kubernetes Resources
        run: |
          kubectl delete namespace verkstedt-demo --ignore-not-found=true

      # Step 14: Cleanup Terraform-managed infra
      - name: Terraform Destroy
        working-directory: terraform
        run: terraform destroy -auto-approve
